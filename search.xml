<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>协变和逆变</title>
      <link href="/2024/02/04/%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/"/>
      <url>/2024/02/04/%E5%8D%8F%E5%8F%98%E5%92%8C%E9%80%86%E5%8F%98/</url>
      
        <content type="html"><![CDATA[<h3 id="父子类型"><a href="#父子类型" class="headerlink" title="父子类型"></a>父子类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dog 继承于 Animal，拥有比 Animal 更多的方法。因此我们说 Animal 是父类型，Dog 是它的子类型。需要注意的是，子类型的属性比父类型更多、更具体：</p><ul><li><p>在TS类型系统中，属性更多的类型是子类型。</p></li><li><p>在集合论中，属性更少的集合是子集。</p><br/></li></ul><p>但是在联合类型中需要注意父子类型的关系，因为确实有点「反直觉」。’a’ | ‘b’ | ‘c’ 乍一看比 ‘a’ | ‘b’  的属性更多，那么 ‘a’ | ‘b’ | ‘c’ 是 ‘a’ | ‘b’  的子类型吗？其实正相反，’a’ | ‘b’ | ‘c’ 是  ‘a’ | ‘b’  的父类型，因为前者包含的范围更广，而后者则更具体。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Parent</span> = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Child</span> = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: <span class="title class_">Parent</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容，因为 &quot;a&quot; | &quot;b&quot; | &quot;c&quot; 包含了 &quot;a&quot; | &quot;b&quot; 的所有可能值</span></span><br><span class="line">p = c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不兼容，因为 c 只能是 &quot;a&quot; 或 &quot;b&quot;，而 &quot;a&quot; | &quot;b&quot; | &quot;c&quot; 包含了 &quot;c&quot;，所以无法确定 p 是 &quot;a&quot; 或 &quot;b&quot;</span></span><br><span class="line">c = p;</span><br></pre></td></tr></table></figure><ul><li><p>父类型比子类型更宽泛，涵盖的范围更广，而子类型比父类型更具体</p></li><li><p>子类型一定可以赋值给父类型</p><br/></li></ul><h3 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h3><ul><li>协变： 允许子类型转换为父类型</li><li>逆变： 允许父类型转换为子类型</li></ul><h4 id="协变"><a href="#协变" class="headerlink" title="协变"></a>协变</h4><p>协变是指可以使用派生类型（子类型）来替换基础类型的情况。在 TypeScript 中，这通常涉及函数参数和数组等数据结构。类型 A 可以赋值给类型 B，而实际上 A 是 B 的子类型，那么就可以说类型 A 是类型 B 的协变。</p><p>例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">animal</span>: <span class="title class_">Animal</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;大黄&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dog</span>: <span class="title class_">Dog</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;大黄&#x27;</span>,</span><br><span class="line">  <span class="attr">bark</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容，能赋值成功，这就是一个协变</span></span><br><span class="line">animal = dog</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不兼容，会抛出类型错误：类型 &quot;Animal&quot; 中缺少属性 &quot;bark&quot;，但类型 &quot;Dog&quot; 中需要该属性。</span></span><br><span class="line">dog = animal</span><br></pre></td></tr></table></figure><p>在上面的代码中，dog 能够赋值给 animal。根据鸭子类型理论，只要一个类型包含 name，就可以认为它是一个和 Animal 兼容的类型。因此 dog 可以成功赋值给 animal，而对于多出来的 bark() 方法，可以忽略不计。反过来，animal 却不能赋值给 dog。因为 dog 要求的是 Dog 类型， 必须包含 age 和 bark，而 Animal 不满足这个条件。</p><br/><h3 id="逆变"><a href="#逆变" class="headerlink" title="逆变"></a>逆变</h3><p>逆变是指可以使用基础类型（父类型）来替换派生类型（子类型）的情况。在 TypeScript 中，这通常涉及函数参数和函数返回类型。如果类型 A 可以接受类型 B 作为其输入，而实际上 B 是 A 的子类型，那么就可以说类型 A 是类型 B 的逆变。</p><p>例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lookAnimal = (<span class="attr">animal</span>: <span class="title class_">Animal</span>): <span class="function"><span class="params">Dog</span> =&gt;</span> &#123;</span><br><span class="line">  animal.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: animal.<span class="property">name</span>,</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lookDog = (<span class="attr">dog</span>: <span class="title class_">Dog</span>): <span class="function"><span class="params">Animal</span> =&gt;</span> &#123;</span><br><span class="line">  dog.<span class="property">name</span>;</span><br><span class="line">  dog.<span class="title function_">bark</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: dog.<span class="property">name</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容</span></span><br><span class="line">lookDog = lookAnimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不兼容, 会抛出类型错误</span></span><br><span class="line"><span class="comment">// 不能将类型“(dog: Dog) =&gt; Animal”分配给类型“(animal: Animal) =&gt; Dog”。</span></span><br><span class="line"><span class="comment">// 参数“dog”和“animal” 的类型不兼容 ，类型 &quot;Animal&quot; 中缺少属性 &quot;bark&quot;，但类型 &quot;Dog&quot; 中需要该属性。</span></span><br><span class="line">lookAnimal = lookDog;</span><br></pre></td></tr></table></figure><p>为什么 lookAnimal可以赋值给 lookDog，反之则会报错？改写一下上面lookDog函数：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lookDog = lookAnimal</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写后</span></span><br><span class="line">lookDog = (<span class="attr">dog</span>: <span class="title class_">Dog</span>): <span class="function"><span class="params">Animal</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 入参 dog 满足 lookAnimal 入参需要的 Animal 类型</span></span><br><span class="line">  <span class="comment">// 并且 lookAnimal 返回值 dog 包含更多的信息，也符合 lookDog 返回值要求的 Animal 类型</span></span><br><span class="line">  <span class="keyword">const</span> dog1 = <span class="title function_">lookAnimal</span>(dog);</span><br><span class="line">  <span class="keyword">return</span> dog1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把 lookAnimal赋值给 lookDog，可以理解为在 lookDog里面调用 lookAnimal这个函数。 lookAnimal的入参需要的是一个 Animal 类型，而 dog 包含更多的信息，显然满足这个条件。反之则不行，我们可以按照上面的方法来改写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line">lookAnimal = lookDog</span><br><span class="line"></span><br><span class="line"><span class="comment">// after </span></span><br><span class="line">lookAnimal = (<span class="attr">animal</span>: <span class="title class_">Animal</span>): <span class="function"><span class="params">Dog</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 入参 animal 不满足 visitDog 入参要求的 Dog 类型</span></span><br><span class="line">  <span class="comment">// 并且 lookDog 返回值 animal 不符合 lookDog 返回值要求的 Dog 类型。如果调用 animal.bark() 会导致程序抛错</span></span><br><span class="line">  <span class="keyword">const</span> animal1 = <span class="title function_">lookDog</span>(animal); </span><br><span class="line">  <span class="keyword">return</span> animal1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上面的实现，可以抽象出如下两个函数类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">lookAnimal</span>: <span class="function">(<span class="params">animal: Animal</span>) =&gt;</span> <span class="title class_">Dog</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">lookDog</span>: <span class="function">(<span class="params">dog: Dog</span>) =&gt;</span> <span class="title class_">Animal</span>;</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>函数参数是逆变：Animal 变换成 Dog，父类型 -&gt; 子类型</li><li>函数返回值是协变：Dog 变成 Animal，子类型 -&gt; 父类型</li></ul><h3 id="不可变类型-Readonly"><a href="#不可变类型-Readonly" class="headerlink" title="不可变类型 Readonly"></a>不可变类型 Readonly</h3><p>在TypeScript中，Readonly关键字用于创建不可变类型。当一个变量被声明为readonly时，它的值将不能被重新赋值。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Obj</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法分配到 &quot;a&quot; ，因为它是只读属性。</span></span><br><span class="line">obj.<span class="property">a</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以修改 Readonly不支持深度</span></span><br><span class="line">obj.<span class="property">c</span>.<span class="property">d</span> = <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决Readonly不支持深度的方法</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepReadonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [k <span class="keyword">in</span> keyof T]: <span class="title class_">DeepReadonly</span>&lt;T[k]&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">DeepReadonly</span>&lt;<span class="title class_">Obj</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法分配到 &quot;d&quot; ，因为它是只读属性</span></span><br><span class="line">obj.<span class="property">c</span>.<span class="property">d</span> = <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ts类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联合类型和交叉类型</title>
      <link href="/2023/11/24/%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/11/24/%E8%81%94%E5%90%88%E7%B1%BB%E5%9E%8B%E5%92%8C%E4%BA%A4%E5%8F%89%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1、联合类型（Union-Types）"><a href="#1、联合类型（Union-Types）" class="headerlink" title="1、联合类型（Union Types）"></a>1、联合类型（Union Types）</h3><p>联合类型（Union Types）是 TypeScript 中的一种高级类型，它允许一个变量可以存储多种类型的值。具体来说，联合类型用 <code>|</code> 符号将多个类型进行组合。例如，<code>string | number</code> 表示该变量可以存储字符串或数字类型的值。联合类型的特点是灵活多样，可以应对不同的数据类型。它允许我们在某个位置期望多个可能的类型，并根据实际情况使用不同的类型</p><h5 id="1-1、基本联合类型"><a href="#1-1、基本联合类型" class="headerlink" title="1.1、基本联合类型"></a>1.1、基本联合类型</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">data</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">data = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">data = <span class="literal">false</span>; <span class="comment">// 编译错误：不能将类型“boolean”分配给类型“string | number”。</span></span><br></pre></td></tr></table></figure><p>上面这段代码中，我们定义了一个变量 data，类型为 number 和 string 的联合类型，因此，data 的值只能是这两种类型中的其中一种，复制其它类型的值会报错。</p><br/><h5 id="2-2-对象联合类型"><a href="#2-2-对象联合类型" class="headerlink" title="2.2. 对象联合类型"></a>2.2. 对象联合类型</h5><p>对象联合类型只能访问联合中所有类型共有的成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User1</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User2</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">hello</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">User1</span> | <span class="title class_">User2</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">hello</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;早上好&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);     <span class="comment">// 编译错误</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">25</span>;            <span class="comment">// 编译错误</span></span><br><span class="line">person.<span class="title function_">hello</span>();              <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>在上面这段代码中，定义了二个类型User1和User2，分别声明了name、age和name、hello的类型定义，然后声明了一个person对象使用了User1和User2组合的联合类型，这个person对象里面就可以包含name、age以及hello的属性，在使用person对象里面的name时是完全可以的使用的，因为在User1和User2中这个name是共有的属性，而在使用age属性和hello的时候就会出现编译错误（类型 <code>User1 | User2</code> 上不存在属性 <code>age</code>。 类型 <code>User2</code> 上不存在属性 <code>age</code> ），这个是因为他们并不是他们共有的属性。</p><p>造成该错误的原因是，TypeScript 在联合类型上只能访问联合类型中所有类型的共有属性和方法。 因此，通过联合类型的变量只能访问 name 属性，而不能访问 age和hello 属性。</p><br/><h3 id="2、交叉类型（Intersection-Types）"><a href="#2、交叉类型（Intersection-Types）" class="headerlink" title="2、交叉类型（Intersection Types）"></a>2、交叉类型（Intersection Types）</h3><p>TypeScript 的交叉类型（Intersection Types）是将多个类型合并为一个新的类型的一种方式。通过交叉类型，可以创建一个包含了多个类型特性的类型，用 <code>&amp;</code> 来表示。</p><br/><h5 id="2-1、交叉类型的成员类型是基础类型"><a href="#2-1、交叉类型的成员类型是基础类型" class="headerlink" title="2.1、交叉类型的成员类型是基础类型"></a>2.1、交叉类型的成员类型是基础类型</h5><p>交叉类型的成员类型可以为任意类型，但需要注意的是，如果交叉类型的成员类型是基础类型时，交叉类型的结果是 never</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> test = <span class="built_in">string</span> &amp; <span class="built_in">number</span>;   <span class="comment">// 等同于 type T1 = never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">test</span>: test = <span class="string">&#x27;张三&#x27;</span>  <span class="comment">// 编译报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">test</span>: test = <span class="number">123</span>     <span class="comment">// 编译报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意点</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameType</span> = <span class="string">&#x27;张三&#x27;</span> &amp; <span class="built_in">string</span>  <span class="comment">// 等同于type NameType = &#x27;张三&#x27; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">name1</span>: nameType = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">name2</span>: nameType = <span class="string">&#x27;李四&#x27;</span>  <span class="comment">// 编译报错   不能将类型“&quot;李四&quot;”分配给类型“&quot;张三&quot;”</span></span><br></pre></td></tr></table></figure><br/><h5 id="2-2、交叉类型的成员类型是对象类型"><a href="#2-2、交叉类型的成员类型是对象类型" class="headerlink" title="2.2、交叉类型的成员类型是对象类型"></a>2.2、交叉类型的成员类型是对象类型</h5><p>交叉类型的类型成员由各个类型成员的属性成员的并集组成，并且这些属性成员的类型是各个成员类型的交叉类型。这种规则使得交叉类型能够将多个类型的属性成员合并到一个类型中，并且可以同时访问这些属性成员。</p><p>例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，定义了三个类型：A、B和 C，类型 A 具有属性成员 a 和 b，类型 B 具有属性成员 b和 c，类型 C 具有属性成员 c，每个类型具有不同的属性成员。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> D = A &amp; B &amp; C;</span><br></pre></td></tr></table></figure><p>使用交叉类型  <code>A &amp; B &amp; C</code> 创建了一个新的类型 D，它包含了类型 A、B 和 C 的属性成员，那么，合并后的交叉类型的成员类型为：属性成员 a 的类型是 A 的类型，属性成员 b 的类型是 A 和 B 的交叉类型，属性成员 c 的类型是 B 和 C 的交叉类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">testD</span>: D;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t2 = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testD = t1; <span class="comment">// 正常编译</span></span><br><span class="line"></span><br><span class="line">testD = t2;</span><br><span class="line"><span class="comment">// 编译错误</span></span><br><span class="line"><span class="comment">// 不能将类型“&#123; a: number; b: number; &#125;”分配给类型“D”。</span></span><br><span class="line"><span class="comment">// 类型 &quot;&#123; a: number; b: number; &#125;&quot; 中缺少属性 &quot;c&quot;，但类型 &quot;B&quot; 中需要该属性。。</span></span><br></pre></td></tr></table></figure><p>上面这段代码中，定义了一个变量 ，它的类型是 <code>A &amp; B &amp; C</code> 组成的交叉类型，然后再定义了两个变量 t1 和 t2，因为 t1 同时满足 A、B 和 C 类型约束，所以能赋值给交叉类型 test。而 t2 满足 A 类型约束，是 A 类型，但并不能赋值给交叉类型 t，当 t2 赋值给 t 的时候，编译器会报错。</p><br/><h5 id="2-3、成员类型合并"><a href="#2-3、成员类型合并" class="headerlink" title="2.3、成员类型合并"></a>2.3、成员类型合并</h5><p>如果交叉类型的成员类型中有相同的类型，合并后的交叉类型将只保留一份该成员的类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T1</span> = <span class="built_in">string</span> &amp; <span class="built_in">string</span>;   <span class="comment">// 等同于 type T1 = string</span></span><br></pre></td></tr></table></figure><br/><h5 id="2-4、交叉类型的调用签名"><a href="#2-4、交叉类型的调用签名" class="headerlink" title="2.4、交叉类型的调用签名"></a>2.4、交叉类型的调用签名</h5><p>当交叉类型的成员类型中至少有一个具有调用签名时，交叉类型的结果类型也会包含这个调用签名。换句话说，交叉类型中至少一个成员的调用签名会被合并到结果类型中。此外，如果交叉类型的多个成员类型都有调用签名，那么结果类型将会形成调用签名重载的结构。调用签名重载允许我们为同一个函数提供多个不同的调用方式，具体取决于参数类型和返回值类型。可以将交叉类型的成员类型的调用签名视为函数的签名，交叉类型的结果类型即为这些签名的合并。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">FunA</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FunB</span> = <span class="function">(<span class="params">x: <span class="built_in">string</span>, y: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FunType</span> = <span class="title class_">FunA</span> &amp; <span class="title class_">FunB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fun</span>: <span class="title class_">FunType</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="number">10</span>, <span class="number">20</span>));     <span class="comment">// 输出: 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fun</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>));   <span class="comment">// 输出: ab</span></span><br></pre></td></tr></table></figure><h3 id="3、类型缩减"><a href="#3、类型缩减" class="headerlink" title="3、类型缩减"></a>3、类型缩减</h3><p>当字面量类型和原始类型进行联合，那么就会造成类型缩减，也可以说两个联合类型在类型中存在父子关系的时候，会类型缩减以父类型为主。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="string">&#x27;a&#x27;</span> | <span class="built_in">string</span>;  <span class="comment">// string类型</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="literal">false</span> | <span class="built_in">boolean</span>; <span class="comment">// bolean 类型</span></span><br><span class="line"><span class="keyword">type</span> C = <span class="number">1</span> | <span class="built_in">number</span>; <span class="comment">// number类型</span></span><br></pre></td></tr></table></figure><p>当然枚举也会有类型缩减现象，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Class</span> &#123;</span><br><span class="line">   A,</span><br><span class="line">   B</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">type</span> C = <span class="title class_">Class</span>.<span class="property">A</span> | <span class="title class_">Class</span>; <span class="comment">// Class类型</span></span><br></pre></td></tr></table></figure><h6 id="类型缩减"><a href="#类型缩减" class="headerlink" title="类型缩减"></a>类型缩减</h6><p>因为类型缩减后，相对的之前ts 利用编译器提供的提示功能也消失。<br>为了解决这个问题TypeScript官方其实还提供了一个方法，让类型缩减被控制，可以给父类型添加 <code>&amp; &#123;&#125;</code> </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ColorType</span> = <span class="string">&quot;red&quot;</span> | <span class="string">&quot;yellow&quot;</span> | <span class="built_in">string</span> &amp;&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="4、交叉和联合优先级"><a href="#4、交叉和联合优先级" class="headerlink" title="4、交叉和联合优先级"></a>4、交叉和联合优先级</h3><p>当联合，交叉类型组合时，联合操作符 <code>|</code> 优先级低于交叉操作符 <code>&amp;</code> (与javascript的逻辑或 <code>||</code>，逻辑与 <code>&amp;&amp;</code> 表现一致)。可以使用括号 <code>()</code> 调整优先级。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> =</span><br><span class="line">  | (&#123; <span class="attr">id</span>: <span class="built_in">number</span> &#125; &amp; &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;)</span><br><span class="line">  | (&#123; <span class="attr">id</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">name</span>: <span class="built_in">number</span> &#125;);</span><br><span class="line"><span class="comment">// 等价于&#123;id：number,name: string&#125; | &#123;id： string, name: number&#125;</span></span><br></pre></td></tr></table></figure><p>当联合类型和其他类型运算时是分开运算的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运算：当联合类型和其他类型运算时是分开运算的</span></span><br><span class="line"><span class="keyword">type</span> test1 = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="number">1</span> &amp; <span class="built_in">string</span></span><br><span class="line"><span class="comment">// 等同于 </span></span><br><span class="line"><span class="keyword">type</span> test2 = (<span class="string">&#x27;a&#x27;</span> &amp; <span class="built_in">string</span>) | (<span class="string">&#x27;b&#x27;</span> &amp; <span class="built_in">string</span>) | (<span class="number">1</span> &amp; <span class="built_in">string</span>)  <span class="comment">// &#x27;a&#x27; | &#x27;b&#x27;</span></span><br><span class="line"><span class="comment">//               &#x27;a&#x27;       |      &#x27;b&#x27;       |   &#x27;never&#x27;  =  &#x27;a&#x27; | &#x27;b&#x27; </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ts类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幽灵依赖</title>
      <link href="/2023/09/06/%E5%B9%BD%E7%81%B5%E4%BE%9D%E8%B5%96/"/>
      <url>/2023/09/06/%E5%B9%BD%E7%81%B5%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<p><strong>1、什么是幽灵依赖？</strong></p><p>  “幽灵依赖”是指那些在你的<code>package.json</code>文件中没有明确列出，但是由于其他依赖库的需求而被自动安装的依赖项。它们在你的<code>node_modules</code>目录中，但你可能没有意识到它们的存在。幽灵依赖有时也被称为”隐式依赖”或”间接依赖”。</p><p>  举个例子：</p><p>  在package.json文件中只有一个依赖包element-plus</p><p>  <img src="/aa61f346094d84301d5dabb7169c977f.png" alt="截图"></p><p>  我们使用 npm install安装后，看到在 node_modules 目录下出现了很多在package.json里没有声明的东西，那么这些没有声明的东西统称为幻影依赖。</p><p>  并且这些没有声明的依赖也可以正常地导入使用，就比如上面lodash这个库我们任然可以导入这个库，并且可以正常的使用它里边的一些函数。也就是说在这个例子里 loadsh 这个库就好像是一个幽灵一样，明明没有手动的去安装，但是莫名其妙的就可以使用了。</p><p><strong>2、幽灵依赖造成的问题</strong></p><ul><li><p>版本问题：</p><p>比如说这里我们有一个项目P，在项目中安装了A这个库，A的版本是v1.0，但是A库又依赖B库，B库的版本也是v1.0。同时我们在项目中也没有去主动的安装B库，然后就在项目中去使用了B库的一些方法或者是api。这个时候因为没有手动安装，但是在项目里边仍然可以去导入它并且使用，这就产生了幽灵依赖。</p><p><img src="/d2f888810dea0a9ba8fe1cfb64c515d6.png" alt="截图"></p><p>有一天我们要把 A 库进行升级，升级到 v2 的版本，v2 这个版本有可能要使用 B 库的 v2 版本，于是 B 库也会跟着升级，而 B 库升级之后，它里边有些方法或者API可能有变动，那么就会导致我们之前用 B 库的代码全部出问题了。</p><p><img src="/f2c3229796c3a1e9eebb2185e1c611ad.png" alt="截图"></p></li><li><p>依赖丢失：</p><p>项目使用开发依赖安装了一个 A 库，A 库又依赖 B 库，然后项目里导入了 B 库来使用。因为我们 A 库使用的是开发依赖，而到了生产环境我们就不会安装这个 A 库了，那么 A 依赖的 B 也不会被安装，但是我们在开发的时候又去使用了这个 B，到了生产环境 B 库也没了，这就导致了依赖丢失。这个问题同样很难排查，在本地好好的到了生产环境就出问题了。</p><p><img src="/7b9724945ecf901799df3e54449fdcea.png" alt="截图"></p></li><li><p>增加应用大小：幽灵依赖可能会导致你的node_modules文件夹增大，因为每个额外的依赖项都会增加你的应用大小，可能并不需要这些依赖项，但它们却会占用你的磁盘空间。</p></li></ul><p><strong>3、幽灵依赖的产生</strong></p><pre><code>为什么会出现幽灵依赖呢？其实在npm最早的版本中使用了很简单的嵌套模式进行依赖管理，比如我们在项目中依赖了A模块和C模块，而A模块和C模块依赖了不同版本的B模块，此时生成的node_modules目录如下：![截图](30bc9411769d5c447af8f0730e6b4403.png)&lt;img src=&quot;a7a651f58dae0bd2f88dca74c8656ce8.png&quot; alt=&quot;截图&quot; style=&quot;zoom:50%;&quot; /&gt;可以看到这种是嵌套的结构，每个模块的依赖下面还会存在一个 node_modules 目录来存放模块依赖的依赖。这种方式虽然简单明了，但存在一些比较大的问题。如果我们在项目中增加一个同样依赖2.0版本B的模块D，此时生成的node_modules目录便会如下所示。虽然模块A、D依赖同一个版本B，但B却重复下载安装了两遍，造成了重复的空间浪费。这便是依赖地狱。所以后来出现了一个包管理器叫yarn，它把这个问题解决了，yarn将依赖扁平化了，不管什么依赖关系，通通作为node_modules的子目录扁平化之后如何来表示依赖关系，nodeJs不是有一个查询包的流程，如果说 A 依赖了 B 和 C，那么 A 里边的代码在 require 或者是 import 的时候，在本身的目录里找不到这两个依赖，就会向上查找，向上找就找到了，这样就没有依赖地狱了，后面npm 3.x的版本也是采用了这种方式。![截图](62d1a1beef3a1987ea709c9f8cde498a.png)</code></pre><p>但是，这样就会产生幽灵依赖了。</p><p><strong>4、怎么解决幽灵依赖</strong></p><pre><code>这个时候pnpm登场了，pnpm 最出色的一点，就是它解决了幽灵依赖的问题。pnpm把所有的包存到一个仓库文件夹.pnpm里面，然后在node_modules里面用正常的树结构，来表达包依赖。但是pnpm这么做，不会有重复项，因为这里它使用的是硬连接和软连接的方式，也就是说树形结构并不占空间，而只是指向仓库里的一个个链接，这样问题就解决了。</code></pre><p><img src="/fc90df237374f7ad8d9037d8c5ca51dc.png" alt="截图"></p><p><img src="/5c950d238f88aceec6fe243be1a76539.png" alt="截图"></p><p><img src="/c34207484bb76556bb6deb1028d58844.png" alt="截图"></p><p><strong>软链接和硬链接</strong></p><p>硬链接：我们的文件数据，都是存在磁盘上的，我们创建一个文件，就给它分配一段磁盘空间，文件是一个指针，指针指向这个磁盘空间，可以通过文件A创建一个硬链接文件B，如果是通过硬链接来创建的话，那么B的指针和A是一样的，他也是同样指向这个磁盘空间，这样就是两个文件，共用一块磁盘空间，这样在硬链接的前提下，把文件A干掉了，不会影响文件B</p><p>软链接：软链接类似于快捷方式，它和硬链接的区别是，此处的文件A通过软链接创建文件B，文件B指向的是文件A，而不是磁盘空间，相当于B是A的一个快捷方式</p><p><img src="/ef441057ec3a187b00c731dc90925c5b.png" alt="截图"></p><p>在pnpm中硬连接和软连接都用到了，先使用符号链接Symbolic link（软链接）来创建依赖项的嵌套结构，将项目的直接依赖符号链接到node_modules的根目录，直接依赖的实际位置在.pnpm&#x2F;<name>@<version>&#x2F;node_modules&#x2F;<name>，依赖包中的每个文件再硬链接（Hard link）到.pnpm store。</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的新特性</title>
      <link href="/2023/09/06/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/"/>
      <url>/2023/09/06/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<ol><li><p>新增了Array的flat()方法和flatMap()方法</p><ol><li><p>Array.prototype.flat()</p><p>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// flat()方法最基本的作用就是数组降维</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.<span class="title function_">flat</span>(); </span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.<span class="title function_">flat</span>();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr3.<span class="title function_">flat</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Infinity 作为深度，展开任意深度的嵌套数组</span></span><br><span class="line">arr3.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>); </span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其次，还可以利用flat()方法的特性来去除数组的空项</span></span><br><span class="line"><span class="keyword">const</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr4.<span class="title function_">flat</span>();</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.flatMap()</p><p>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。 这里我们拿map方法与flatMap方法做一个比较。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr1.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>]); </span><br><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span><br><span class="line"></span><br><span class="line">arr1.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x * <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会将 flatMap 中的函数返回的数组 “压平” 一层</span></span><br><span class="line">arr1.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> [[x * <span class="number">2</span>]]);</span><br><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>新增了String的trimStart()方法和trimEnd()方法</p><p>去除字符串前后的空白字符，跟trimLeft()和trimRight()效果是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es2019</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;  string  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>());    <span class="comment">// =&gt; &quot;string   &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>());      <span class="comment">// =&gt; &quot;   string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相同结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimLeft</span>());     <span class="comment">// =&gt; &quot;string   &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimRight</span>());    <span class="comment">// =&gt; &quot;   string&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Object.fromEntries()</p><p>Object.entries()方法的作用是返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。</p><p>而Object.fromEntries() 则是 Object.entries() 的反转。</p><p>Object.fromEntries() 函数传入一个键值对的列表，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现@iterator方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类似数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 Object.fromEntries， 可以将 Map 转化为 Object:</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([ [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>], [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>] ]);</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 Object.fromEntries， 可以将 Array 转化为 Object:</span></span><br><span class="line"><span class="keyword">const</span> arr = [ [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] ];</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; 0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot; &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Symbol.prototype.description</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过工厂函数Symbol（）创建符号时，您可以选择通过参数提供字符串作为描述：</span></span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;The description&#x27;</span>);</span><br><span class="line"><span class="comment">// 以前，访问描述的唯一方法是将符号转换为字符串：</span></span><br><span class="line">assert.<span class="title function_">equal</span>(<span class="title class_">String</span>(sym), <span class="string">&#x27;Symbol(The description)&#x27;</span>);</span><br><span class="line"><span class="comment">// 现在引入了getter Symbol.prototype.description以直接访问描述：</span></span><br><span class="line">assert.<span class="title function_">equal</span>(sym.<span class="property">description</span>, <span class="string">&#x27;The description&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>String.prototype.matchAll</p><p>matchAll() 方法返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。并且返回一个不可重启的迭代器。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/t(e)(st(\d?))/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;test1test2&#x27;</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">match</span>(reg) <span class="comment">// [&#x27;test1&#x27;, &#x27;test2&#x27;]</span></span><br><span class="line">str.<span class="title function_">matchAll</span>(reg) <span class="comment">// RegExpStringIterator &#123;&#125;</span></span><br><span class="line">[...str.<span class="title function_">matchAll</span>(reg)] <span class="comment">// [[&#x27;test1&#x27;, &#x27;e&#x27;, &#x27;st1&#x27;, &#x27;1&#x27;, index: 0, input: &#x27;test1test2&#x27;, length: 4], </span></span><br><span class="line">[<span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;st2&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="attr">index</span>: <span class="number">5</span>, <span class="attr">input</span>: <span class="string">&#x27;test1test2&#x27;</span>, <span class="attr">length</span>: <span class="number">4</span>]]</span><br></pre></td></tr></table></figure></li><li><p>try…catch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ES10中try...catch 语句中的参数变为了一个可选项。以前我们写 try...catch 语句时，</span></span><br><span class="line"><span class="comment">// 必须传递一个异常参数，这就意味着，即使我们在 catch 中不需要这个异常参数，也必须要</span></span><br><span class="line"><span class="comment">// 把它传递进去。</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// trycode</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;error&#x27;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 ES10 中，我们可以省略这个参数：</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// trycode</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;error&#x27;</span>, error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Promise.allSettled()、Promise.any()</p><p>在 Promise上有提供一组组合方法（比如最常用到的 Promise.all），它们都是接收多个 promise 对象，并返回一个表示组合结果的新的 promise，依据所传入 promise 的结果状态，组合后的 promise 将切换为不同的状态。目前为止这类方法一共有如下四个，这四个方法之间仅有判断逻辑上的区别，也都有各自所适用的场景：</p><p>1、Promise.all： 返回一个组合后的 promise，当所有 promise 全部切换为 fulfilled 状态后，该 promise 切换为 fulfilled 状态；但若有任意一个 promise 切换为 rejected 状态，该 promise 将立即切换为 rejected 状态；</p><p>2、Promise.race： 返回一个组合后的 promise，当 promise 中有任意一个切换为 fulfilled 或 rejected 状态时，该 promise 将立即切换为相同状态；</p><p>3、Promise.allSettled： 返回一个组合后的 promise，当所有 promise 全部切换为 fulfilled 或 rejected 状态时，该 promise 将切换为 fulfilled 状态；</p><p>4、Promise.any： 返回一个组合后的 promise，当 promise 中有任意一个切换为 fulfilled 状态时，该 promise 将立即切换为 fulfilled 状态，但只有所有 promise 全部切换为 rejected 状态时，该 promise 才切换为 rejected 状态。</p><p>其中allSettled、any算是比较新的特性，下面的案例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.allSettled</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promise1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promise2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([<span class="title function_">promise1</span>(), <span class="title function_">promise2</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="comment">// [</span></span><br><span class="line">  <span class="comment">//   &#123; status: &#x27;fulfilled&#x27;, value: &#x27;成功&#x27; &#125;,</span></span><br><span class="line">  <span class="comment">//   &#123; status: &#x27;rejected&#x27;, reason: &#x27;失败&#x27; &#125;</span></span><br><span class="line">  <span class="comment">// ]</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Promise.any</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promise1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promise2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([<span class="title function_">promise1</span>(), <span class="title function_">promise2</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="comment">// 成功</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promise1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promise2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([<span class="title function_">promise1</span>(), <span class="title function_">promise2</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  <span class="comment">// AggregateError: All promises were rejected</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>BigInt</p><p>在 ES 中，所有 Number 类型的值都使用 64 位浮点数格式存储，因此 Number 类型可以有效表示的最大整数为 2^53。而使用新的 BigInt 类型，可以操作任意精度的整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有两种使用方式：1、在数字字面量的后面添加后缀n；2、使用其构造函数BigInt</span></span><br><span class="line"><span class="comment">// const alsoHuge = 9007199254740991n</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="title class_">BigInt</span>(<span class="number">9007199254740991</span>)</span><br><span class="line"><span class="keyword">typeof</span> bigInt  <span class="comment">//bigint</span></span><br><span class="line"><span class="comment">// 在超过 Number 最大整数限制时，我们也可以改为传入一个可能被正确解析的字符串</span></span><br><span class="line"><span class="comment">// 和 Number 类似，BigInt 也支持+、-、、**、%运算符</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="number">2n</span></span><br><span class="line">bigInt + <span class="number">3n</span> <span class="comment">// 5n</span></span><br><span class="line">bigInt * <span class="number">3n</span> <span class="comment">// 6n</span></span><br><span class="line"><span class="comment">// 但因为 BigInt 是纯粹的整数类型，无法表示小数位，因此 BigInt 的除法运算（/）的结果值依然还是一个整数，</span></span><br><span class="line"><span class="comment">// 即向下取整：</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="number">3n</span>;</span><br><span class="line">bigInt / <span class="number">2n</span>;    <span class="comment">// =&gt; 1n，而不是 1.5n</span></span><br></pre></td></tr></table></figure></li><li><p>GlobalThis</p><p>如果你的代码需要在多个环境（例如浏览器和 Node 服务器）下运行，那么它们所使用全局对象名称并不一致。在浏览器中用的是 window，Node 则用的是 global，而 web worker 用的是 self 。现在，无论代码在哪种环境中运行，globalThis 都能够为你提供正确的全局对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 globalThis 之前，我们需要这样去获取全局对象：</span></span><br><span class="line"><span class="keyword">const</span> getGlobal = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> self; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> <span class="variable language_">window</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">global</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123; <span class="keyword">return</span> <span class="variable language_">global</span>; &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;unable to locate global object&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ES2020 中引入 globalThis 作为顶层对象，在任何环境下，</span></span><br><span class="line"><span class="comment">// 都可以简单的通过 globalThis 拿到顶层对象。</span></span><br></pre></td></tr></table></figure></li><li><p>?? 空值合并</p><p>ES2020 新增了一个运算符 ??。当左侧的操作数为 null 或者 undefined时，返回其右侧操作数，否则返回左侧操作数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">u1</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">u2</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">u3</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">u4</span>: <span class="literal">undefined</span></span><br><span class="line">    <span class="attr">u5</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u1 = user.<span class="property">u1</span> || <span class="string">&#x27;用户1&#x27;</span>  <span class="comment">// 用户1</span></span><br><span class="line"><span class="keyword">let</span> u2 = user.<span class="property">u2</span> || <span class="string">&#x27;用户2&#x27;</span>  <span class="comment">// 用户2</span></span><br><span class="line"><span class="keyword">let</span> u3 = user.<span class="property">u3</span> || <span class="string">&#x27;用户3&#x27;</span>  <span class="comment">// 用户3</span></span><br><span class="line"><span class="keyword">let</span> u4 = user.<span class="property">u4</span> || <span class="string">&#x27;用户4&#x27;</span>  <span class="comment">// 用户4</span></span><br><span class="line"><span class="keyword">let</span> u5 = user.<span class="property">u5</span> || <span class="string">&#x27;用户5&#x27;</span>  <span class="comment">// 用户5</span></span><br><span class="line"><span class="comment">// ES2020语法</span></span><br><span class="line"><span class="keyword">let</span> u1 = user.<span class="property">u1</span> ?? <span class="string">&#x27;用户1&#x27;</span>  <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> u2 = user.<span class="property">u2</span> ?? <span class="string">&#x27;用户2&#x27;</span>  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">let</span> u3 = user.<span class="property">u3</span> ?? <span class="string">&#x27;用户3&#x27;</span>  <span class="comment">// 用户3</span></span><br><span class="line"><span class="keyword">let</span> u4 = user.<span class="property">u4</span> ?? <span class="string">&#x27;用户4&#x27;</span>  <span class="comment">// 用户4</span></span><br><span class="line"><span class="keyword">let</span> u5 = user.<span class="property">u5</span> ?? <span class="string">&#x27;用户5&#x27;</span>  <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>?.可选链</p><p>?.用于检测不确定的中间节点，如果不存在中间节点则返回undefined。避免了程序报错直接导致整个应用挂掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> u1 = user.<span class="property">childer</span>.<span class="property">name</span> <span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br><span class="line"><span class="comment">// es11 语法</span></span><br><span class="line"><span class="keyword">let</span> u1 = user.<span class="property">childer</span>?.<span class="property">name</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>类的私有变量</p><p>ES2020 添加了新的语法，在类属性、方法前面加 # 表示私有属性、方法，并且需要提前声明，私有属性、方法只有在内部才能调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">//公有属性</span></span><br><span class="line">  name;</span><br><span class="line">  <span class="comment">//私有属性</span></span><br><span class="line">  #age;</span><br><span class="line">  #weight;</span><br><span class="line">  <span class="comment">//构造方法</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age, weight</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.#age = age;</span><br><span class="line">      <span class="variable language_">this</span>.#weight = weight;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//私有方法</span></span><br><span class="line">  #<span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">intro</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight);</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">getName</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;晓红&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;45kg&#x27;</span>);</span><br><span class="line"><span class="comment">// girl.#getName()//报错</span></span><br><span class="line"><span class="comment">// console.log(girl.name);</span></span><br><span class="line"><span class="comment">// console.log(girl.#age);//报错</span></span><br><span class="line"><span class="comment">// console.log(girl.#weight);</span></span><br><span class="line"></span><br><span class="line">girl.<span class="title function_">intro</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>动态 import 加载</p><p>ES6 的模块化是一个静态的模块系统，动态 import 实现按需加载。</p><p>import() 函数返回结果是一个 Promise 对象，成功的值就是模块里暴露处理的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hello</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo.js</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>( <span class="function"><span class="params">modules</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(modules.<span class="title function_">hello</span>())</span><br><span class="line">  <span class="comment">// hello</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS的新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/18/hello-world/"/>
      <url>/2023/08/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
